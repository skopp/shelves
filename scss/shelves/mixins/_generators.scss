// Generates the entire grid, made up of reusable classes for a modular OOCSS
// approach to using the grid. All of the class names can be customized.
//
//   $prefixes        - Include prefix classes. Deafults to true.
//   $suffixes        - Include suffix classes. Deafults to true.
//   $pushes          - Include push classes. Deafults to true.
//   $pulls           - Include pull classes. Deafults to true.
//   $nested          - Include nested columns in the default grid.
//                      Defaults to true.
//   $nested-prefixes - Include prefix classes for neseted columns.
//                      Defaults to true.
//   $nested-suffixes - Include suffix classes for neseted columns.
//                      Defaults to true.
//   $nested-pushes   - Include push classes for neseted columns.
//                      Defaults to false.
//   $nested-pulls    - Include pull classes for neseted columns.
//                      Defaults to false.
//   $tablet          - Include tablet columns & resets. Defaults to true.
//   $tablet-prefixes - Include prefix classes for tablet columns.
//                      Defaults to false.
//   $tablet-suffixes - Include suffix classes for tablet columns.
//                      Defaults to false.
//   $tablet-pushes   - Include push classes for tablet columns.
//                      Defaults to false.
//   $tablet-pulls    - Include pull classes for tablet columns.
//                      Defaults to false.
//   $mobile          - Include mobile columns & resets. Defaults to true.
//   $mobile-prefixes - Include prefix classes for mobile columns.
//                      Defaults to false.
//   $mobile-suffixes - Include suffix classes for mobile columns.
//                      Defaults to false.
//   $mobile-pushes   - Include push classes for mobile columns.
//                      Defaults to false.
//   $mobile-pulls    - Include pull classes for mobile columns.
//                      Defaults to false.
//
@mixin shelves(
    $prefixes: $shelves-prefixes,
    $suffixes: $shelves-suffixes,
    $pushes: $shelves-pushes,
    $pulls: $shelves-pulls,
    $nested: $shelves-nested,
    $nested-prefixes: $shelves-nested-prefixes,
    $nested-suffixes: $shelves-nested-suffixes,
    $nested-pushes: $shelves-nested-pushes,
    $nested-pulls: $shelves-nested-pulls,
    $tablet: $shelves-tablet,
    $tablet-prefixes: $shelves-tablet-prefixes,
    $tablet-suffixes: $shelves-tablet-suffixes,
    $tablet-pushes: $shelves-tablet-pushes,
    $tablet-pulls: $shelves-tablet-pulls,
    $mobile: $shelves-mobile,
    $mobile-prefixes: $shelves-mobile-prefixes,
    $mobile-suffixes: $shelves-mobile-suffixes,
    $mobile-pushes: $shelves-mobile-pushes,
    $mobile-pulls: $shelves-mobile-pulls) {
  @include shelves-base($reset-if-tablet: false, $reset-if-mobile: false);
  @include shelves-columns(
    $prefixes: $prefixes,
    $suffixes: $suffixes,
    $pushes: $pushes,
    $pulls: $pulls
  );

  @if $nested {
    @for $i from 1 to $shelves-columns - 1  {
      // Loop background through the columns
      // to cascade the nested column properties.
      $i: $shelves-columns - $i;

      #{column-selector($shelves-column-name, $i)} {
        #{columns-selector($shelves-column-name)} {
          @include column-gutter($i, $reset-first: false);
        }

        @include shelves-columns(
          $context: $i,
          $prefixes: $nested-prefixes,
          $suffixes: $nested-suffixes,
          $pushes: $nested-pushes,
          $pulls: $nested-pulls
        );
      }
    }
  }

  @if $tablet {
    @include tablet {
      @if $shelves-tablet-margin != $shelves-margin {
        .#{$shelves-row-name} {
          @include container($shelves-tablet-margin);
        }
      }

      @include shelves-resets;
    }

    @include screen(if($mobile, $shelves-mobile-breakpoint, null), $shelves-tablet-breakpoint) {
      // Use the extra specificity from the row class
      // to apply tablet column properties even when nested
      .#{$shelves-row-name} {
        #{columns-selector($shelves-tablet-column-name)} {
          @include column-base($reset-if-tablet: false, $reset-if-mobile: false);
          @include column-gutter($total: $shelves-tablet-columns, $gutter: $shelves-tablet-gutter);

          @if $shelves-reset-vertical-margin {
            margin-top: 0;
          }
        }

        @include shelves-columns(
          $column-name: $shelves-tablet-column-name,
          $total: $shelves-tablet-columns,
          $gutter: $shelves-tablet-gutter,
          $prefixes: $tablet-prefixes,
          $suffixes: $tablet-suffixes,
          $pushes: $tablet-pushes,
          $pulls: $tablet-pulls
        );
      }
    }
  }

  @if $mobile {
    @include mobile {
      @if $shelves-mobile-margin != if($tablet, $shelves-margin, $shelves-tablet-margin) {
        .#{$shelves-row-name} {
          @include container($shelves-mobile-margin);
        }
      }

      @if not $tablet {
        @include shelves-resets($reset-row: $tablet == false);
      }

      // Use the extra specificity from the row class
      // to apply mobile column properties even when nested
      .#{$shelves-row-name} {
        #{columns-selector($shelves-mobile-column-name)} {
          @include column-base($reset-if-tablet: false, $reset-if-mobile: false);
          @include column-gutter($total: $shelves-mobile-columns, $gutter: $shelves-mobile-gutter);

          @if $shelves-reset-vertical-margin {
            margin-top: 0;
          }
        }

        @include shelves-columns(
          $column-name: $shelves-mobile-column-name,
          $total: $shelves-mobile-columns,
          $gutter: $shelves-mobile-gutter,
          $prefixes: $mobile-prefixes,
          $suffixes: $mobile-suffixes,
          $pushes: $mobile-pushes,
          $pulls: $mobile-pulls
        );
      }
    }
  }
}

// Generates the grid's base classes, namely the
// the row and container elements.
//
//   $reset-if-tablet - Include styles for resetting the grid at
//                      tablet sizes. Defaults to true.
//   $reset-if-mobile - Include styles for resetting the grid at
//                      mobile sizes. Defaults to false.
//
@mixin shelves-base($reset-if-tablet: true, $reset-if-mobile: false) {
  .#{$shelves-row-name} {
    @include container;
    @include row($reset-if-tablet: $reset-if-tablet, $reset-if-mobile: $reset-if-mobile);

    .#{$shelves-row-name} {
      @include reset-container;
      @include reset-row;
    }
  }

  #{columns-selector($shelves-column-name)} {
    @include column-base($reset-if-tablet: $reset-if-tablet, $reset-if-mobile: $reset-if-mobile);
    @include column-gutter($reset-first: false);
  }

  .#{$shelves-row-name} {
    #{columns-selector($shelves-column-name)} {
      &:first-child {
        @include reset-column-gutter;
      }
    }
  }
}

// Generates the classes used for laying out and modifying
// the columns. This can be used in different contexts, varying
// the number of columns if necessary.
//
//   $column-name - The name of the column to generate widths for.
//                  Defaults to $shelves-column-name
//   $start       - Where to start the loop. Defaults to 1.
//   $end         - Where to end the loop.
//                  Defaults to the value of $total.
//   $context     - The context of generated classes.
//                  Defaults to the value of $total.
//   $total       - The total number of columns in the grid.
//                  Defaults to the value of $shelves-columns.
//   $gutter      - The width of the gutter in the root context (in %).
//                  Defaults to the value of $shelves-gutter.
//   $prefixes    - Include prefix classes. Deafults to true.
//   $suffixes    - Include suffix classes. Deafults to true.
//   $pushes      - Include push classes. Deafults to true.
//   $pulls       - Include pull classes. Deafults to true.
//
@mixin shelves-columns(
    $column-name: $shelves-column-name,
    $start: 1,
    $end: null,
    $context: null,
    $total: $shelves-columns,
    $gutter: $shelves-gutter,
    $prefixes: true,
    $suffixes: true,
    $pushes: true,
    $pulls: true) {
  $context: $total !default;
  $end: $context !default;

  @for $i from $start to $end  {
    #{column-selector($column-name, $i)} {
      @include columns-width($i, $context, $total, $gutter);
    }
  }
  @if $prefixes {
    @for $i from $start to $end  {
      #{column-selector($shelves-prefix-name, $i)} {
        @include column-prefix($i, $context, $total, $gutter);
      }
    }
  }
  @if $suffixes {
    @for $i from $start to $end  {
      #{column-selector($shelves-suffix-name, $i)} {
        @include column-suffix($i, $context, $total, $gutter);
      }
    }
  }
  @if $pushes {
    @for $i from $start to $end  {
      #{column-selector($shelves-push-name, $i)} {
        @include column-push($i, $context, $total, $gutter);
      }
    }
  }
  @if $pulls {
    @for $i from $start to $end  {
      #{column-selector($shelves-pull-name, $i)} {
        @include column-pull($i, $context, $total, $gutter);
      }
    }
  }
}

// Resets the row and column elements so they take up
// the full width of their parent element. All modifying
// effects are removed from columns as well.
//
//   $reset-row     - Reset the row. Defaults to true.
//   $reset-columns - Reset columns (including nested columns).
//                    Defaults to true
//
@mixin shelves-resets($reset-row: true, $reset-columns: true) {
  .#{$shelves-row-name} {
    @if $reset-row {
      @include reset-row;
    }
    @if $reset-columns {
      #{columns-selector($shelves-column-name)} {
        @include reset-column;
      }
    }
  }
}
